[{"/Users/mikecassidy/Documents/code/WebProjects/Challenge Projects/openweather-react-type/src/reportWebVitals.ts":"1","/Users/mikecassidy/Documents/code/WebProjects/Challenge Projects/openweather-react-type/src/App.tsx":"2","/Users/mikecassidy/Documents/code/WebProjects/Challenge Projects/openweather-react-type/src/types/service.tsx":"3","/Users/mikecassidy/Documents/code/WebProjects/Challenge Projects/openweather-react-type/src/components/openWeather.tsx":"4","/Users/mikecassidy/Documents/code/WebProjects/Challenge Projects/openweather-react-type/src/utils/setAuthToken.js":"5"},{"size":425,"mtime":1612142722586,"results":"6","hashOfConfig":"7"},{"size":3276,"mtime":1612559922868,"results":"8","hashOfConfig":"9"},{"size":319,"mtime":1612498296768,"results":"10","hashOfConfig":"7"},{"size":867,"mtime":1612499023283,"results":"11","hashOfConfig":"7"},{"size":215,"mtime":1612548655406,"results":"12","hashOfConfig":"9"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"odc2b3",{"filePath":"15","messages":"16","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},"14k8csn",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/mikecassidy/Documents/code/WebProjects/Challenge Projects/openweather-react-type/src/reportWebVitals.ts",[],"/Users/mikecassidy/Documents/code/WebProjects/Challenge Projects/openweather-react-type/src/App.tsx",["24","25","26"],"import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport { Card } from \"@material-ui/core\";\nimport styled from \"styled-components\";\nimport { API_KEY, FORECAST_URL, WEATHER_URL } from \"./utils/setAuthToken\";\nimport { format, fromUnixTime } from \"date-fns\";\n\n\n\ninterface State {\n  temp: {[key: string] : string}\n}\nexport interface AllWeather {\n  // fiveDays: string[];\n  // temp: string\n}\n\ninterface Weather {\n  // temp: number,\n  // description: string,\n  // city: string,\n  // day: string\n}\n\nconst initialWeatherState: Weather = {\n    temp: 0,\n  description: \"\",\n  city: \"\",\n  day: \"\"\n}\n\nconst App: React.FunctionComponent<AllWeather> = props => {\nconst [weather, setWeather] = useState<Weather>(initialWeatherState);\nconst [forecast, setForecast] = useState<any>('')\n//  const [weatherData, setWeatherData] = useState<Service<AllWeather>>({\n//    status: \"loading\"\n//  })\n\nconst parseDate = (unixDate: number) =>{\n  let date = fromUnixTime(unixDate);\n  let day = format(date, 'EEEE');\n  return day\n}\n\nconst getCurrentWeather = async () => {\n  const response = await fetch(`${WEATHER_URL}?q=London&units=metric&APPID=${API_KEY}`);\n  const data = await response.json();\n  const temp = data.main.temp\n  let currentWeather : any[] = [];\n  const [weather] = data.weather;\n  const description = weather.description;\n  const day = parseDate(data.dt)\n  const city = data.name\n  console.log(description)\n  const icon = weather.icon\n  currentWeather.push([temp, description, day, city])\n  setWeather({ ...weather, currentWeather})\n\n}\n\nconst getForecast = async () => {\n  const response = await fetch(`${FORECAST_URL}?q=London&units=metric&APPID=${API_KEY}`);\n  const data = await response.json();\n  if(data.list){\n    let weatherList = data.list;\n    let fiveDayForecast : any[] = [];\n    for (let i = 0; i < weatherList.length; i += 8) {\n      let date = fromUnixTime(weatherList[i].dt);\n      let day = format(date, 'EEEEEE');\n      let weatherIcon = weatherList[i].weather[0].icon;\n      let Temp = Math.floor(weatherList[i].main.temp);\n\n      fiveDayForecast.push([day, weatherIcon, Temp]);\n    }\n    setForecast(fiveDayForecast)\n  }\n}\n\n\nuseEffect(()=> {\n  getCurrentWeather();\n  getForecast();\n}, []);\n\n\nconst renderFiveDayForecast = () => {\n  if (forecast){\n  return forecast.map((day: string) => {\n    return(\n      <Day key={day[0]}>\n        <p>{day[0]}</p>\n        <img src={`http://openweathermap.org/img/wn/${day[1]}.png`} alt=\"weatherIcon\"/>\n        <p id=\"Temp\">{day[2]}<span>&deg;</span><span>C</span></p>\n    </Day>\n    );\n  })};\n}\n\n  return (\n    <WeatherContainer>\n\n{weather &&\n<WeatherCard>\n  <CurrentContainer>{weather}\n  </CurrentContainer>\n\n <ForecastContainer>\n  {renderFiveDayForecast()}\n</ForecastContainer>\n\n</WeatherCard>\n}\n    </WeatherContainer>\n  )\n\n}\n\nconst Flex = styled.div`\n  display: flex\n`;\n\nconst WeatherContainer = styled(Flex)`\n  justify-content: center\n`;\n\nconst Day = styled(Flex)`\n align-items: center;\n flex-direction: column\n`;\n\nconst CurrentContainer = styled(Flex)`\n justify-content: center;\n`;\n\nconst ForecastContainer = styled(Flex)`flex-direction: row`;\n\nconst WeatherCard = styled(Card)`\ndisplay: flex;\n// justify-content: center;\nflex-direction: column;\nalign-content: center;\npadding: 5px;\n`;\n\nexport default App;\n","/Users/mikecassidy/Documents/code/WebProjects/Challenge Projects/openweather-react-type/src/types/service.tsx",[],"/Users/mikecassidy/Documents/code/WebProjects/Challenge Projects/openweather-react-type/src/components/openWeather.tsx",[],"/Users/mikecassidy/Documents/code/WebProjects/Challenge Projects/openweather-react-type/src/utils/setAuthToken.js",[],{"ruleId":"27","severity":1,"message":"28","line":10,"column":11,"nodeType":"29","messageId":"30","endLine":10,"endColumn":16},{"ruleId":"27","severity":1,"message":"31","line":55,"column":9,"nodeType":"29","messageId":"30","endLine":55,"endColumn":13},{"ruleId":"32","severity":1,"message":"33","line":83,"column":4,"nodeType":"34","endLine":83,"endColumn":6,"suggestions":"35"},"@typescript-eslint/no-unused-vars","'State' is defined but never used.","Identifier","unusedVar","'icon' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getCurrentWeather'. Either include it or remove the dependency array.","ArrayExpression",["36"],{"desc":"37","fix":"38"},"Update the dependencies array to be: [getCurrentWeather]",{"range":"39","text":"40"},[2213,2215],"[getCurrentWeather]"]